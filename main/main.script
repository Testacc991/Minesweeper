Node = require "main.node"
data = require "main.data"
local columns = 0
local rows = 0
local hardness = 0
local shift_x
local shift_y

local function countemptynodes(self)
	for y=1,columns do
		for x=1,rows do
			if self.nodes[y][x].type == "empty" then
				self.emptynodescount = self.emptynodescount + 1
			end
		end
	end
end

local function world2tile(p)
	return vmath.vector3(math.floor((p.x+data.tilesize-shift_x)/data.tilesize),
	math.floor((p.y+data.tilesize-shift_y)/data.tilesize),0)
end
local function tile2world(p)
	return vmath.vector3((p.x * data.tilesize)-(data.tilesize/2)+shift_x,
	(p.y * data.tilesize)-(data.tilesize/2)+shift_y,0)
end

local function checkwin(self)
	if self.game then
		local emptynodesopen = 0
		for y=1,columns do
			for x=1,rows do
				if self.nodes[y][x].type == "empty" and self.nodes[y][x].state then
					emptynodesopen = emptynodesopen + 1
				end
			end
		end
		if emptynodesopen == self.emptynodescount then
			print("you_win")
			msg.post("/gui#main", "youwin")
			self.game = false
		end
	end
end

local function showallmines(self)
	for y=1,columns do
		for x=1,rows do
			local node = self.nodes[y][x]
			if node.type == "mine" then
				node.flagged = false
				node.state = true
			end
		end
	end
end

local function updateall(self)
	for y=1,columns do
		for x=1,rows do
			self.flagged = self.nodes[y][x].flagged
			self.state = self.nodes[y][x].state
			self.id = self.nodes[y][x].spawned
			self.mines = self.nodes[y][x].minesaround
			self.type = self.nodes[y][x].type
			self.label_url = msg.url(nil, self.id, "count")
			self.sprite_url = msg.url(nil, self.id , "sprite")
			if self.state and self.type == "empty" and not self.flagged then
				if self.mines > 0 then
					msg.post(self.sprite_url, "play_animation", { id = hash("emptynode_open") })
					msg.post(self.label_url, "enable")
					label.set_text(self.label_url, self.mines)
				else
					msg.post(self.label_url, "disable")
					msg.post(self.sprite_url, "play_animation", { id = hash("emptynode_open") })
				end
			elseif self.state and self.type == "mine" and not self.flagged then
				msg.post(self.sprite_url, "play_animation", { id = hash("mine_open") })
				msg.post(self.label_url, "disable")
				self.game = false
			elseif not self.state and self.flagged then
				msg.post(self.sprite_url, "play_animation", { id = hash("praporec") })
				msg.post(self.label_url, "disable")
			elseif not self.state and not self.flagged then
				msg.post(self.sprite_url, "play_animation", { id = hash("hidenode") })
				msg.post(self.label_url, "disable")
			else
				msg.post(self.label_url, "disable")
			end
		end
	end
end

local function createnodes(self)
	local map_width = data.tilesize * rows
	local map_height = data.tilesize * columns
	local window_width, window_height = window.get_size()
	shift_x = (window_width - map_width)/2
	shift_y = (window_height - map_height)/2
	for y = 1,columns do
		self.nodes[y] = {}
		for x = 1,rows do
			local pos = tile2world(vmath.vector3(x,y,0))
			local node = Node.new(pos)
			node.spawned = factory.create("go#nodefactory",pos,nil,nil,data.scale)
			local int = math.random(1,100)
			if int < hardness then
				node.type = "mine"
			elseif int > hardness then
				node.type = "empty"
			else
				node.type = "empty"
			end
			self.nodes[y][x] = node
		end
	end
end

local function createconnections(self)
	for y=1,columns do
		for x=1,rows do
			self.nodes[y][x]:add_adjacent_vertex(self.nodes[y+1][x-1])
			self.nodes[y][x]:add_adjacent_vertex(self.nodes[y+1][x])
			self.nodes[y][x]:add_adjacent_vertex(self.nodes[y+1][x+1])
			self.nodes[y][x]:add_adjacent_vertex(self.nodes[y][x+1])
			self.nodes[y][x]:add_adjacent_vertex(self.nodes[y-1][x+1])
			self.nodes[y][x]:add_adjacent_vertex(self.nodes[y-1][x])
			self.nodes[y][x]:add_adjacent_vertex(self.nodes[y-1][x-1])
			self.nodes[y][x]:add_adjacent_vertex(self.nodes[y][x-1])

			self.nodes[y][x]:add_straight_adjacent_vertex(self.nodes[y+1][x])
			self.nodes[y][x]:add_straight_adjacent_vertex(self.nodes[y][x+1])
			self.nodes[y][x]:add_straight_adjacent_vertex(self.nodes[y-1][x])
			self.nodes[y][x]:add_straight_adjacent_vertex(self.nodes[y][x-1])
		end
	end
end

local function reset(self)
	if not self.nodes then return true end
	for y=1,columns do
		for x=1,rows do
			go.delete(self.nodes[y][x].spawned)
			--print(self.nodes[y][x].spawned)
			self.nodes[y][x].spawned = nil
		end
	end
	print("end")
	--self.nodes = {}
	return true
end


function init(self)
	--profiler.enable_ui(true)
	msg.post(".", "acquire_input_focus")
	math.randomseed(os.time()*99999)
	self.game = false
	
	self.emptynodescount = 0
	
	self.state = nil
	self.id = nil
	self.mines = nil
	self.type = nil
	self.label_url = nil
	self.sprite_url = nil
	self.nodes = {}
	--showallmines(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end


function update(self, dt)
	updateall(self)
	checkwin(self)
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("play") then
		if reset(self) then
		self.emptynodescount = 0
		self.game = true
		columns = math.floor(message.size)
		rows = math.floor(message.size)
		hardness = math.floor(message.diff)
		mt = {__index = function(table, key)
			return "pass" end}
			self.nodes = setmetatable(self.nodes,mt)
		createnodes(self)	
		countemptynodes(self)
		createconnections(self)
		--hidealllabels(self)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		if self.game then
			local pos = vmath.vector3(action.x,action.y,0)
			local touch = tile2world(world2tile(pos))
			for y=1,columns do
				for x=1,rows do 
					local node = self.nodes[y][x]
					if node.pos == touch and node.state == false and not node.flagged then
						node.state = true 
						node:show_straight_adjacent_vertex()
						if node.type == "mine" then
							showallmines(self)
							print("game_over")
							msg.post("/gui#main", "youloose")
							self.game = false
						end
					elseif node.pos == touch and node.state == true and not node.flagged then
						node:show_adjacent_vertex()
					end
				end
			end
		end
	elseif action_id == hash("touch2") and action.released then
		if self.game then
			local pos = vmath.vector3(action.x,action.y,0)
			local touch = tile2world(world2tile(pos))
			for y=1,columns do
				for x=1,rows do 
					local node = self.nodes[y][x]
					if node.pos == touch and node.state == false then
						if not node.flagged then
							node.flagged = true
						elseif node.flagged then
							node.flagged = false
						end
					end
				end
			end
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
